js

import React, { useRef, useEffect } from "react";
import "./App.css";

const VideoPlayer = () => {
  const videoRef = useRef(null);
  const isPlayingRef = useRef(false);
  const durationRef = useRef(0);
  const currentTimeRef = useRef(0);
  const volumeRef = useRef(0.5);
  const isMutedRef = useRef(false);

  useEffect(() => {
    const video = videoRef.current;
    video.addEventListener("timeupdate", handleTimeUpdate);
    video.addEventListener("loadedmetadata", handleLoadedMetadata);

    return () => {
      video.removeEventListener("timeupdate", handleTimeUpdate);
      video.removeEventListener("loadedmetadata", handleLoadedMetadata);
    };
  }, []);

  useEffect(() => {
    updateUI();
  }, []);

  const handleTimeUpdate = () => {
    const video = videoRef.current;
    currentTimeRef.current = video.currentTime;
    updateUI();
  };

  const handleLoadedMetadata = () => {
    const video = videoRef.current;
    durationRef.current = video.duration;
  };

  const handlePlayPause = () => {
    const video = videoRef.current;
    if (video.paused) {
      video.play();
      isPlayingRef.current = true;
    } else {
      video.pause();
      isPlayingRef.current = false;
    }
    updateUI();
  };

  const handleSeek = (e) => {
    const video = videoRef.current;
    const seekTime =
      (e.nativeEvent.offsetX / e.target.clientWidth) * video.duration;
    video.currentTime = seekTime;
    currentTimeRef.current = seekTime;
    updateUI();
  };

  const handleVolumeChange = (e) => {
    const video = videoRef.current;
    volumeRef.current = e.target.value;
    video.volume = e.target.value;
    isMutedRef.current = e.target.value === "0";
    updateUI();
  };

  const handleToggleMute = () => {
    const video = videoRef.current;
    if (video.volume === 0) {
      video.volume = volumeRef.current;
      isMutedRef.current = false;
    } else {
      video.volume = 0;
      isMutedRef.current = true;
    }
    updateUI();
  };

  const handleFullscreen = () => {
    const video = videoRef.current;
    if (video.requestFullscreen) {
      video.requestFullscreen();
    } else if (video.mozRequestFullScreen) {
      video.mozRequestFullScreen();
    } else if (video.webkitRequestFullscreen) {
      video.webkitRequestFullscreen();
    } else if (video.msRequestFullscreen) {
      video.msRequestFullscreen();
    }
  };

  const updateUI = () => {
    const playPauseButton = document.getElementById("playPauseButton");
    const muteButton = document.getElementById("muteButton");
    const seekBarFill = document.getElementById("seekBarFill");
    const volumeRangeInput = document.getElementById("volumeRange");

    if (playPauseButton) {
      playPauseButton.textContent = isPlayingRef.current ? "Pause" : "Play";
    }

    if (muteButton) {
      muteButton.textContent = isMutedRef.current ? "Unmute" : "Mute";
    }

    if (seekBarFill) {
      seekBarFill.style.width = `${
        (currentTimeRef.current / durationRef.current) * 100
      }%`;
    }
    if (volumeRangeInput) {
      volumeRangeInput.value = volumeRef.current;
    }
  };

  return (
    <div className="video-player">
      <video
        ref={videoRef}
        className="video"
        src="https://media.geeksforgeeks.org/wp-content/uploads/20190616234019/Canvas.move_.mp4"
        preload="metadata"
      />
      <div className="controls">
        <button onClick={handlePlayPause} id="playPauseButton">
          Play
        </button>
        <div className="seek-bar" onClick={handleSeek}>
          <div
            id="seekBarFill"
            className="seek-bar-fill"
            style={{
              width: `${(currentTimeRef.current / durationRef.current) * 100}%`,
            }}
          />
        </div>
        <div className="volume-controls">
          <button onClick={handleToggleMute} id="muteButton">
            Mute
          </button>
          <input
            type="range"
            id="volumeRange"
            min="0"
            max="1"
            step="0.01"
            value={volumeRef.current}
            onChange={handleVolumeChange}
            onInput={handleVolumeChange} // Add onInput event to update the range input continuously
          />
        </div>
        <button onClick={handleFullscreen}>Fullscreen</button>
      </div>
    </div>
  );
};

export default VideoPlayer;


css


/* App.css */
.video-player {
  position: relative;
  width: 640px;
  height: 360px;
}

.video {
  width: 100%;
  height: 100%;
}

.controls {
  display:none ;
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  color: #fff;
  display: flex;
  align-items: center;
}

button {
  background: none;
  border: none;
  color: #fff;
  cursor: pointer;
  padding: 8px 16px;
  font-size: 16px;
}

.seek-bar {
  flex: 1;
  height: 10px;
  background-color: #fff;
  cursor: pointer;
  margin: 0 8px;
}

.seek-bar-fill {
  height: 100%;
  background-color: #f00;
}

.volume-controls {
  display: flex;
  align-items: center;
  margin-right: 16px;
}

input[type="range"] {
  -webkit-appearance: none;
  width: 100px;
  height: 4px;
  border-radius: 2px;
  background-color: #fff;
  outline: none;
  margin: 0 8px;
}

input[type="range"]::-webkit-slider-thumb {
  -webkit-appearance: none;
  width: 16px;
  height: 16px;
  border-radius: 50%;
  background-color: #f00;
  cursor: pointer;
}


button.fullscreen-button:before {
  content: "\u26F6"; 
}

.video-player:-webkit-full-screen {
  width: 100%;
  height: 100%;
}

.video-player:-moz-full-screen {
  width: 100%;
  height: 100%;
}

.video-player:-ms-fullscreen {
  width: 100%;
  height: 100%;
}

.video-player:fullscreen {
  width: 100%;
  height: 100%;
}
